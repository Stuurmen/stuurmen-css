// ==========================================================================
// Utilities / Widths
// Note: uses flexbox
// ==========================================================================

// ==========================================================================||
//  Mixin to spit out width classes and u-offset which its direction is influenced
//  by o-layouts's direction and if $offsets is set to true
//
//  e.g.
//  <div class="u-1"></div>
//  <div class="u-2 u-offset-1"></div>
// ==========================================================================||

@mixin flexwidths($fractions, $breakpoint: null) {
  @each $denominator in $fractions {
    @for $numerator from 0 through $denominator {
      .u-#{$numerator}#{$breakpoint} {
        flex: 0 0 ($numerator / $denominator) * 100% !important;
        max-width: ($numerator / $denominator) * 100% !important;
      }

      @if ($offsets == true) {
        .o-layout:not(.o-layout--reversed)
          .o-layout__item.u-offset-#{$numerator}#{$breakpoint} {
          margin-left: ($numerator / $denominator) * 100% !important;
        }

        .o-layout.o-layout--reversed
          .o-layout__item.u-offset-#{$numerator}#{$breakpoint} {
          margin-right: ($numerator / $denominator) * 100% !important;
        }
      }
    }
  }
}

@include flexwidths($fractions);

// ==========================================================================||
//  Mixin to generator order clases
//  e.g.
//  <div class="u-order-1"></div>
//  <div class="u-order-2"></div>
// ==========================================================================||

@mixin flex-order($flex-source-ordering-count, $breakpoint: null) {
  @for $i from 1 through $flex-source-ordering-count {
    .u-order-#{$i}#{$breakpoint} {
      @include flexorder($i);
    }
  }
}

/// Changes the source order of a flex child. Children with lower numbers appear first in the layout.
/// @param {Number} $order [0] - Order number to apply.
@mixin flexorder($order: 0) {
  order: $order;
}

@include flex-order($flex-source-ordering-count);

// ==========================================================================||
//  $mq-breakpoints defined building flex widths & order classes
//
//  e.g.
//  <div class="o-layout__item u-1@small"></div>
//  <div class="o-layout__item u-3@large u-offset-1@large"></div>
// ==========================================================================||

@if (variable-exists(mq-breakpoints)) {
  @each $bp-name, $bp-value in $mq-breakpoints {
    @include mq($from: $bp-name) {
      @include flexwidths(
        $fractions,
        #{$widths-breakpoint-separator}#{$bp-name}
      );
      @include flex-order(
        $flex-source-ordering-count,
        #{$widths-breakpoint-separator}#{$bp-name}
      );
    }
  }
}
